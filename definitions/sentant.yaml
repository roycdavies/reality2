# ******************************************************************************************************************************************************
# This is a Sentant definition template.  Follow this guide to define a Sentant Template or a specific Sentant.
# Author: Dr. Roy C. Davies
# Date: 2023.11.18
# Version: 0.0.1
# ******************************************************************************************************************************************************



# ------------------------------------------------------------------------------------------------------------------------------------------------------
# A description of who made or owns the Sentant
# ------------------------------------------------------------------------------------------------------------------------------------------------------
author:
  # The authors ID
  id: !guid

  # The authors name
  name: !str

  # The authors email
  email: !str
# ------------------------------------------------------------------------------------------------------------------------------------------------------



# ------------------------------------------------------------------------------------------------------------------------------------------------------
# An event definition sent to a Sentant
# ------------------------------------------------------------------------------------------------------------------------------------------------------
input_event:
  # The name of the event (to match the transition event)
  event: !str

  # The parameters of the event in JSON format
  parameters: { !str: !json }
# ------------------------------------------------------------------------------------------------------------------------------------------------------



# ------------------------------------------------------------------------------------------------------------------------------------------------------
# Plugins are used to add functionality to Sentants beyond the built-in actions.  The name is used to specify exactly how the plugin works and is defined
# separately in a plugin definition file.
# ------------------------------------------------------------------------------------------------------------------------------------------------------
plugin:
  # The name of the plugin in reverse domain notation, eg: ai.reality2.storage
  name: !str

  # The version of the plugin, eg: "0.1.0"
  version: !str
# ------------------------------------------------------------------------------------------------------------------------------------------------------



# ------------------------------------------------------------------------------------------------------------------------------------------------------
# The action definition of an automation
# ------------------------------------------------------------------------------------------------------------------------------------------------------
action:
  # Optional plugin to use for this action
  plugin: !plugin

  # The command to execute
  command: !str

  # The parameters of the command in JSON format
  parameters: { !str: !json }
# ------------------------------------------------------------------------------------------------------------------------------------------------------



# ------------------------------------------------------------------------------------------------------------------------------------------------------
# An automation transition action definition.
# When an event is sent to a Sentant, the parameters are sent to the first action, and the result of that action is sent to the next action, and so on.
# Paremeters passed in may be passed on to the next action, or may be modified, or new parameters may be added.
# Note that all automations start in the "start" state, and the first event sent is the "init" event.
# There are some events that are reserved for the Node and Sentant system, and these are:
#   State Changing Events
#     init - sent when the Sentant is first created (as above)
#     join_cluster - sent when the Node joins a cluster
#     leave_cluster - sent when the Node leaves a cluster
#     connect - sent when the Node the Sentant is on connects to another Node or Cluster (this is different from joining a cluster)
#     disconnect - sent when the Node the Sentant is on disconnects from another Node or Cluster (this is different from leaving a cluster)
#     go_shadow - sent when the Sentant is moved to shadow status
#     go_active - sent when the Sentant is moved to active status
#
#   Query Events
#     get_shadows - returns a list of the paths or IP address and path to all (known) shadow Sentants
#     get_active - returns the path or IP address and path to the currently active Sentant
#     get_states - returns the current states of the Sentant
#
#   Other Events
#     do_transfer - transfer control of the Sentant to one of the shadow Sentants (thus becoming a shadow Sentant itself and sending a go_shadow event)
# ------------------------------------------------------------------------------------------------------------------------------------------------------
transition:
  # State to match (* = any)
  from: !str

  # Event to match
  event: !str

  # New state to transition to (* = no change)
  to: !str

  # The actions to perform when transition occurs
  actions: [ !action ]
# ------------------------------------------------------------------------------------------------------------------------------------------------------



# ------------------------------------------------------------------------------------------------------------------------------------------------------
# A sentant automation definition
# Each Sentant has a default Automation that determines it's current status, such as active and shadow, and which is preprogrammed to handle the
# init, join_cluster, leave_cluster, connect, disconnect, go_shadow, go_active, shadows, active and transfer events, and change the Sentant state accordingly.
# To access the current state of that default Automation, use the automation name "_" (underscore).
# ------------------------------------------------------------------------------------------------------------------------------------------------------
automation:
  # The name of the automation (must be unique within the Sentant)
  name: !str

  # The description of the automation
  description: !str

  # The transitions of this automation
  transitions: [ !transition ]
# ------------------------------------------------------------------------------------------------------------------------------------------------------



# ------------------------------------------------------------------------------------------------------------------------------------------------------
# A stored state of an Automation
# ------------------------------------------------------------------------------------------------------------------------------------------------------
stored_state:
  # The name of the automation
  name: !str

  # The state of the automation
  state: !str
# ------------------------------------------------------------------------------------------------------------------------------------------------------



# ------------------------------------------------------------------------------------------------------------------------------------------------------
# The definition of a Sentant
# ------------------------------------------------------------------------------------------------------------------------------------------------------
sentant:
  # The guid of the Sentant - for a Sentant Template, this is left empty
  # Loading a Sentant with an empty guid will cause a new Sentant to be created
  # If a guid is provided, the Sentant will be loaded and checked for uniqueness before being allowed to function
  id: !guid

  # The name of the Sentant - best to keep short and simple as it will become part of the pathing.  Avoid using spaces or special characters.
  # The dot '.' character has a special meaning in the pathing, so cannot be used in the name.
  # The name is case insensitive, so "MySentant" and "mysentant" are the same.
  # New Sentants with the same name on a Node will have a unique 6 digit hexcode hash appended to the end of the name to ensure uniqueness on the Node
  name: !str

  # The version of the Sentant, eg: "0.1.0".  When used for a Sentant Template, this is the minimum version of Sentant that can be used with this template.
  # When used for a specific Sentant, this is the version of the Sentant.
  version: !str

  # The class of the Sentant - in reverse domain notation, eg: ai.reality2.sentant.default
  class: !str

  # The initial (immutable) data of the Sentant in key/value pairs of JSON formatted data
  data: { !str: !json }

  # The initial (immutable) binary data of the Sentant in key/value pairs of binary data, eg images, audio, video, etc
  binary: { !str: !binary }

  # A list of strings that may be used to group Sentants together in a Node
  groups: [ !str ]

  # A list of strings that may be used to search for Sentants in a Node
  keywords: [ !str ]

  # The description of the Sentant
  description: !str

  # The author of the Sentant
  author: !author

  # Sentant automations
  automations: [ !automation ]

  # Current stored states of the Sentant (empty if Sentant Template)
  states: [ !stored_state ]
# ------------------------------------------------------------------------------------------------------------------------------------------------------



# ------------------------------------------------------------------------------------------------------------------------------------------------------
# A swarm, which is a group of Sentant Templates that work together to achieve a common goal
# ------------------------------------------------------------------------------------------------------------------------------------------------------
swarm:
  # The name of the swarm
  name: !str

  # The class of the swarm - in reverse domain notation, eg: ai.reality2.swarm.default
  class: !str

  # The description of the swarm
  description: !str

  # The author of the swarm
  author: !author

  # The version of the swarm, eg: "0.1.0"
  version: !str

  # The Sentant Templates that make up the swarm
  sentants: [ !sentant ]
# ------------------------------------------------------------------------------------------------------------------------------------------------------
